name: CI

on:
  push:
    branches: [main]
  pull_request:

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          [
            aarch64-unknown-linux-gnu,
            i686-unknown-linux-gnu,
            x86_64-unknown-linux-gnu,
          ]
        rust: [nightly, stable, "1.73"] # MSRV
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      - name: Enable type layout randomization
        run: echo RUSTFLAGS=${RUSTFLAGS}\ -Zrandomize-layout >> $GITHUB_ENV
        if: matrix.rust == 'nightly'

      - uses: Swatinem/rust-cache@v2

      - run: cargo build
      - run: cargo test
        if: matrix.rust != '1.73' # MSRV
      - run: cargo build --no-default-features
      - run: cargo test --no-default-features
        if: matrix.rust != '1.73' # MSRV
      - run: cargo test
        if: matrix.rust != '1.73' # MSRV
      - run: cargo test --all-features
        if: matrix.rust == 'nightly'

  miri:
    name: miri ${{ matrix.flags }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        flags: ["--no-default-features", "", "--all-features"]
    env:
      MIRIFLAGS: -Zmiri-strict-provenance
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@miri
      - uses: Swatinem/rust-cache@v2
      - run: cargo miri test ${{ matrix.flags }}

  feature-checks:
    name: feature checks
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: taiki-e/install-action@cargo-hack
      - uses: Swatinem/rust-cache@v2
      - name: cargo hack
        run: cargo hack check --feature-powerset --depth 2 --all-targets

  clippy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@clippy
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - run: cargo clippy --workspace --all-targets --all-features
        env:
          RUSTFLAGS: -Dwarnings

  docs:
    name: docs
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-docs
      - uses: Swatinem/rust-cache@v2
      - run: cargo doc --workspace --all-features --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "--cfg docsrs -D warnings"

  fmt:
    name: fmt
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - run: cargo fmt --all --check

  deny:
    uses: ithacaxyz/ci/.github/workflows/deny.yml@main
